
    package test

    import (
        "fmt"
        "testing"
        . "github.com/yao-jz/softfloat-go/comp"
    )

    func Test23(t *testing.T) {
                  // test for 32 bits floating point number 1.5615078852412628e-17 and 4.722111881157753e+34
// test for 64 bits floating point number -7.067987779414026e-241 and -3.893452264384738e+34

fmt.Println("test the addf32")
fmt.Println(F32_add(0x23900610, 0x791182e5))
fmt.Println(uint64(2031190757))
fmt.Println("test the subf32")
fmt.Println(F32_sub(0x23900610, 0x791182e5))
fmt.Println(uint64(4178674405))
fmt.Println("test the mulf32")
fmt.Println(F32_mul(0x23900610, 0x791182e5))
fmt.Println(uint64(1562622502))
fmt.Println("test the divf32")
fmt.Println(F32_div(0x23900610, 0x791182e5))
fmt.Println(uint64(0))
fmt.Println("test the eqf32")
fmt.Println(F32_eq(0x23900610, 0x791182e5))
fmt.Println("False")
fmt.Println("test the lef32")
fmt.Println(F32_le(0x23900610, 0x791182e5))
fmt.Println("True")
fmt.Println("test the ltf32")
fmt.Println(F32_lt(0x23900610, 0x791182e5))
fmt.Println("True")
fmt.Println("test the remf32")
fmt.Println(F32_rem(0x23900610, 0x791182e5))
fmt.Println(uint64(596641296))
fmt.Println("test the roundToIntf32")
fmt.Println(F32_roundToInt(0x23900610,false))
fmt.Println(uint64(0))
fmt.Println("test the sqrtf32")
fmt.Println(F32_sqrt(0x23900610))
fmt.Println(uint64(830981778))
fmt.Println("test the mulAddf32")
fmt.Println(F32_mulAdd(0x23900610, 0x791182e5, 0x23900610))
fmt.Println(uint64(1562622502))
fmt.Println("test the addf64")
fmt.Println(F64_add(0x8e12da0e1c4ca32c, 0xc71dfe7b0ec7fd57))
fmt.Println(uint64(14347903792354688343))
fmt.Println("test the subf64")
fmt.Println(F64_sub(0x8e12da0e1c4ca32c, 0xc71dfe7b0ec7fd57))
fmt.Println(uint64(5124531755499912535))
fmt.Println("test the mulf64")
fmt.Println(F64_mul(0x8e12da0e1c4ca32c, 0xc71dfe7b0ec7fd57))
fmt.Println(uint64(1531693949297723497))
fmt.Println("test the divf64")
fmt.Println(F64_div(0x8e12da0e1c4ca32c, 0xc71dfe7b0ec7fd57))
fmt.Println(uint64(496553536614230092))
fmt.Println("test the eqf64")
fmt.Println(F64_eq(0x8e12da0e1c4ca32c, 0xc71dfe7b0ec7fd57))
fmt.Println("False")
fmt.Println("test the lef64")
fmt.Println(F64_le(0x8e12da0e1c4ca32c, 0xc71dfe7b0ec7fd57))
fmt.Println("False")
fmt.Println("test the ltf64")
fmt.Println(F64_lt(0x8e12da0e1c4ca32c, 0xc71dfe7b0ec7fd57))
fmt.Println("False")
fmt.Println("test the remf64")
fmt.Println(F64_rem(0x8e12da0e1c4ca32c, 0xc71dfe7b0ec7fd57))
fmt.Println(uint64(10237484657105740588))
fmt.Println("test the roundToIntf64")
fmt.Println(F64_roundToInt(0x8e12da0e1c4ca32c,false))
fmt.Println(uint64(0))
fmt.Println("test the sqrtf64")
fmt.Println(F64_sqrt(0xe12da0e1c4ca32c))
fmt.Println(uint64(2810631071452716539))
fmt.Println("test the mulAddf64")
fmt.Println(F64_mulAdd(0x8e12da0e1c4ca32c, 0xc71dfe7b0ec7fd57, 0x8e12da0e1c4ca32c))
fmt.Println(uint64(1531693949297723497))
}
